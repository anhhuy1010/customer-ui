name: CI-diqit-microservice-cms-ui-prod



on:
  pull_request:
    types: [opened,synchronize]
    branches:
      - release/**
  pull_request_review:
    types: [submitted]




env:
  SERVICE_NAME: diqit-microservice-cms-ui
  AWS_REGION: ap-southeast-1
  AWS_ACCOUNT_ID: 713273531260
  ENVIRONMENT: prod
  
jobs:
  release_build:
      if: ${{ github.event.pull_request && startsWith(github.event.pull_request.base.ref,'release') }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4.1.1

        - name: Configure AWS Credentials 2
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: ap-southeast-1
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ECR_DOCKER }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECR_DOCKER }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build, tag, and push docker image to Amazon ECR
          env:
            GITHUB_ACCESS_KEY: ${{ secrets.GH_ACCESS_TOKEN }}

          run: |
            echo "ENVIRONMENT=prod" >> .build
            echo "BUILD_TIMESTAMP=$(date +'%Y.%m.%d %H:%M:%S')" >> .build
            echo "BUILD_NUM=${{github.run_number}}" >> .build
            ECR_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$SERVICE_NAME
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              --build-arg GITHUB_ACCESS_KEY=${GITHUB_ACCESS_KEY} \
              -t app .
            docker tag app ${ECR_REPO}:$ENVIRONMENT-${GITHUB_SHA}
            docker tag app ${ECR_REPO}:$ENVIRONMENT-latest
            docker push ${ECR_REPO}:$ENVIRONMENT-${GITHUB_SHA}
            docker push ${ECR_REPO}:$ENVIRONMENT-latest


  deploy_to_prod:
      if: ${{ github.event.review && github.event.review.state == 'approved' }}
      runs-on: ubuntu-latest
      needs: release_build
      env:
        CLUSTER_NAME: mini-prod
        NAMESPACE: travel-sunflower
      steps:
        - name: Checkout
          uses: actions/checkout@v4.1.1

        - name: Configure AWS Credentials 2
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-region: ap-southeast-1
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOYUSER }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOYUSER }}

        - name: Connect EKS
          run: |
            aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

        - name: Image Patching
          run: |
            envsubst < .deployment/patch_deployment_prod.yaml > patchset
            kubectl patch deployment ${SERVICE_NAME} -n $NAMESPACE --patch-file patchset






